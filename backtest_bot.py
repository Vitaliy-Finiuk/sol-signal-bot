import ccxt
import pandas as pd
import numpy as np
import ta
from datetime import datetime, timedelta
import time

# === –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è –º–∞–ª–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ ===
INITIAL_BALANCE = 100.0
RISK_PER_TRADE = 0.03  # 3% —Ä–∏—Å–∫–∞ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ)
MAX_LEVERAGE = 7  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 7x –¥–ª—è –º–∞–ª–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
COMMISSION = 0.0006
MIN_RISK_REWARD = 2.0

exchange = ccxt.okx({'enableRateLimit': True})

def fetch_historical_data(symbol, timeframe, days=90):
    print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {symbol} {timeframe} –∑–∞ {days} –¥–Ω–µ–π...")
    
    since = exchange.milliseconds() - days * 24 * 60 * 60 * 1000
    all_ohlcv = []
    
    while since < exchange.milliseconds():
        try:
            ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=1000)
            if not ohlcv:
                break
            all_ohlcv.extend(ohlcv)
            since = ohlcv[-1][0] + 1
            time.sleep(exchange.rateLimit / 1000)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)
            continue
    
    df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π\n")
    return df

# === –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø 1: 4h - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π Turtle ===
def strategy_4h_aggressive_turtle(df):
    """
    Turtle Trading —Å –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
    - –°–Ω–∏–∂–µ–Ω –ø–µ—Ä–∏–æ–¥ —Å 20 –¥–æ 15 (–±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤)
    - –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ Volume
    - –£–≤–µ–ª–∏—á–µ–Ω–æ –ø–ª–µ—á–æ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
    """
    # Donchian Channels (15 –≤–º–µ—Å—Ç–æ 20)
    df['High_15'] = df['high'].rolling(window=15).max()
    df['Low_15'] = df['low'].rolling(window=15).min()
    
    # EMA
    df['EMA_21'] = ta.trend.ema_indicator(df['close'], window=21)
    df['EMA_55'] = ta.trend.ema_indicator(df['close'], window=55)
    
    # ATR
    df['ATR'] = ta.volatility.average_true_range(df['high'], df['low'], df['close'], window=14)
    
    # ADX
    df['ADX'] = ta.trend.adx(df['high'], df['low'], df['close'], window=14)
    
    # Volume
    df['Volume_SMA'] = df['volume'].rolling(window=20).mean()
    
    # RSI –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    df['RSI'] = ta.momentum.rsi(df['close'], window=14)
    
    df['signal'] = 0
    df['sl_distance'] = 0.0
    df['tp_distance'] = 0.0
    
    for i in range(55, len(df)):
        close = df.iloc[i]['close']
        high_15 = df.iloc[i-1]['High_15']
        low_15 = df.iloc[i-1]['Low_15']
        ema21 = df.iloc[i]['EMA_21']
        ema55 = df.iloc[i]['EMA_55']
        atr = df.iloc[i]['ATR']
        adx = df.iloc[i]['ADX']
        volume = df.iloc[i]['volume']
        volume_sma = df.iloc[i]['Volume_SMA']
        rsi = df.iloc[i]['RSI']
        
        # LONG: –ø—Ä–æ–±–æ–π + —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö + –æ–±—ä–µ–º + RSI –Ω–µ –ø–µ—Ä–µ–≥—Ä–µ—Ç
        if (close > high_15 and 
            ema21 > ema55 and 
            adx > 18 and  # —Å–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
            volume > volume_sma * 1.1 and  # —Å–º—è–≥—á–∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
            rsi < 75):  # –Ω–µ –≤—Ö–æ–¥–∏–º –≤ —è–≤–Ω–æ–º –ø–µ—Ä–µ–∫—É–ø–µ
            df.loc[df.index[i], 'signal'] = 1
            df.loc[df.index[i], 'sl_distance'] = atr * 1.8  # —á—É—Ç—å —É–∂–µ —Å—Ç–æ–ø
            df.loc[df.index[i], 'tp_distance'] = atr * 5.5  # R:R ~ 3:1
        
        # SHORT: –ø—Ä–æ–±–æ–π + —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑ + –æ–±—ä–µ–º + RSI –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
        elif (close < low_15 and 
              ema21 < ema55 and 
              adx > 18 and 
              volume > volume_sma * 1.1 and
              rsi > 25):
            df.loc[df.index[i], 'signal'] = -1
            df.loc[df.index[i], 'sl_distance'] = atr * 1.8
            df.loc[df.index[i], 'tp_distance'] = atr * 5.5
    
    return df

# === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø 2: 12h - Momentum Breakout ===
def strategy_12h_momentum(df):
    """
    –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    - –í—Ö–æ–¥ –Ω–∞ –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –ø—Ä–æ–±–æ—è—Ö —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    - –í—ã—Å–æ–∫–∏–π R:R –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –º–µ–Ω—å—à–µ–≥–æ Win Rate
    """
    # EMA –ª–µ–Ω—Ç–∞
    df['EMA_9'] = ta.trend.ema_indicator(df['close'], window=9)
    df['EMA_21'] = ta.trend.ema_indicator(df['close'], window=21)
    df['EMA_50'] = ta.trend.ema_indicator(df['close'], window=50)
    
    # Bollinger Bands
    bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
    df['BB_Upper'] = bb.bollinger_hband()
    df['BB_Lower'] = bb.bollinger_lband()
    df['BB_Width'] = (df['BB_Upper'] - df['BB_Lower']) / df['close']  # —à–∏—Ä–∏–Ω–∞ –≤ %
    
    # MACD
    macd = ta.trend.MACD(df['close'])
    df['MACD'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    df['MACD_Hist'] = macd.macd_diff()
    
    # RSI
    df['RSI'] = ta.momentum.rsi(df['close'], window=14)
    
    # ATR
    df['ATR'] = ta.volatility.average_true_range(df['high'], df['low'], df['close'], window=14)
    
    # Volume
    df['Volume_SMA'] = df['volume'].rolling(window=20).mean()
    df['Volume_Ratio'] = df['volume'] / df['Volume_SMA']
    
    df['signal'] = 0
    df['sl_distance'] = 0.0
    df['tp_distance'] = 0.0
    
    for i in range(50, len(df)):
        close = df.iloc[i]['close']
        ema9 = df.iloc[i]['EMA_9']
        ema21 = df.iloc[i]['EMA_21']
        ema50 = df.iloc[i]['EMA_50']
        bb_upper = df.iloc[i]['BB_Upper']
        bb_lower = df.iloc[i]['BB_Lower']
        bb_width = df.iloc[i]['BB_Width']
        
        macd_val = df.iloc[i]['MACD']
        macd_sig = df.iloc[i]['MACD_Signal']
        macd_hist = df.iloc[i]['MACD_Hist']
        macd_hist_prev = df.iloc[i-1]['MACD_Hist']
        
        rsi = df.iloc[i]['RSI']
        atr = df.iloc[i]['ATR']
        volume_ratio = df.iloc[i]['Volume_Ratio']
        
        # LONG: —Ü–µ–Ω–∞ –ø—Ä–æ–±–∏–≤–∞–µ—Ç BB –≤–µ—Ä—Ö + EMA –≤—ã—Å—Ç—Ä–æ–µ–Ω—ã + MACD —Ä–∞—Å—Ç–µ—Ç + –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞
        if (close > bb_upper and 
            ema9 > ema21 > ema50 and
            macd_hist > macd_hist_prev and macd_val > macd_sig and
            volume_ratio > 1.5 and  # –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞
            30 < rsi < 70 and
            bb_width > 0.02):  # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            df.loc[df.index[i], 'signal'] = 1
            df.loc[df.index[i], 'sl_distance'] = atr * 2.2
            df.loc[df.index[i], 'tp_distance'] = atr * 6.5  # R:R ~ 3:1
        
        # SHORT: —Ü–µ–Ω–∞ –ø—Ä–æ–±–∏–≤–∞–µ—Ç BB –Ω–∏–∑ + EMA –≤—ã—Å—Ç—Ä–æ–µ–Ω—ã –≤–Ω–∏–∑ + MACD –ø–∞–¥–∞–µ—Ç + –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞
        elif (close < bb_lower and 
              ema9 < ema21 < ema50 and
              macd_hist < macd_hist_prev and macd_val < macd_sig and
              volume_ratio > 1.5 and
              30 < rsi < 70 and
              bb_width > 0.02):
            df.loc[df.index[i], 'signal'] = -1
            df.loc[df.index[i], 'sl_distance'] = atr * 2.2
            df.loc[df.index[i], 'tp_distance'] = atr * 6.5
    
    return df

# === –ù–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø 3: 1d - Strong Trend Following ===
def strategy_1d_strong_trend(df):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ç—Ä–µ–Ω–¥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –¥–Ω–µ–≤–æ–∫
    - –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–∏–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏
    - –í—Ö–æ–¥ –Ω–∞ –æ—Ç–∫–∞—Ç–∞—Ö –∫ EMA
    - –ú–µ–Ω—å—à–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ = –±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    # EMA
    df['EMA_20'] = ta.trend.ema_indicator(df['close'], window=20)
    df['EMA_50'] = ta.trend.ema_indicator(df['close'], window=50)
    df['EMA_100'] = ta.trend.ema_indicator(df['close'], window=100)
    
    # ADX –∏ DI
    df['ADX'] = ta.trend.adx(df['high'], df['low'], df['close'], window=14)
    df['+DI'] = ta.trend.adx_pos(df['high'], df['low'], df['close'], window=14)
    df['-DI'] = ta.trend.adx_neg(df['high'], df['low'], df['close'], window=14)
    
    # RSI
    df['RSI'] = ta.momentum.rsi(df['close'], window=14)
    
    # ATR
    df['ATR'] = ta.volatility.average_true_range(df['high'], df['low'], df['close'], window=14)
    
    # MACD –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    macd = ta.trend.MACD(df['close'])
    df['MACD'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    
    df['signal'] = 0
    df['sl_distance'] = 0.0
    df['tp_distance'] = 0.0
    
    for i in range(100, len(df)):
        close = df.iloc[i]['close']
        ema20 = df.iloc[i]['EMA_20']
        ema50 = df.iloc[i]['EMA_50']
        ema100 = df.iloc[i]['EMA_100']
        
        adx = df.iloc[i]['ADX']
        plus_di = df.iloc[i]['+DI']
        minus_di = df.iloc[i]['-DI']
        
        rsi = df.iloc[i]['RSI']
        macd_val = df.iloc[i]['MACD']
        macd_sig = df.iloc[i]['MACD_Signal']
        
        atr = df.iloc[i]['ATR']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        uptrend = ema20 > ema50 > ema100
        downtrend = ema20 < ema50 < ema100
        
        # LONG: –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ + –æ—Ç–∫–∞—Ç –∫ EMA20 + ADX —Å–∏–ª—å–Ω—ã–π + DI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
        if (uptrend and 
            close <= ema20 * 1.02 and close >= ema20 * 0.97 and  # –æ–∫–æ–ª–æ EMA20
            adx > 22 and plus_di > minus_di and
            40 < rsi < 60 and
            macd_val > macd_sig):
            df.loc[df.index[i], 'signal'] = 1
            df.loc[df.index[i], 'sl_distance'] = atr * 3
            df.loc[df.index[i], 'tp_distance'] = atr * 8  # R:R ~ 2.7:1
        
        # SHORT: –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ + –æ—Ç–∫–∞—Ç –∫ EMA20 + ADX —Å–∏–ª—å–Ω—ã–π + DI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
        elif (downtrend and 
              close >= ema20 * 0.98 and close <= ema20 * 1.03 and
              adx > 22 and minus_di > plus_di and
              40 < rsi < 60 and
              macd_val < macd_sig):
            df.loc[df.index[i], 'signal'] = -1
            df.loc[df.index[i], 'sl_distance'] = atr * 3
            df.loc[df.index[i], 'tp_distance'] = atr * 8
    
    return df

# === –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø–ª–µ—á–æ–º ===
def backtest_aggressive(df, strategy_name, symbol, timeframe):
    print(f"\n{'='*90}")
    print(f"üéØ {strategy_name}")
    print(f"üìä {symbol} | {timeframe}")
    print(f"üìÖ {df['timestamp'].min().strftime('%Y-%m-%d')} ‚Üí {df['timestamp'].max().strftime('%Y-%m-%d')}")
    print(f"‚ö° –ê–ì–†–ï–°–°–ò–í–ù–´–ô –†–ï–ñ–ò–ú: –ü–ª–µ—á–æ –¥–æ {MAX_LEVERAGE}x | –†–∏—Å–∫ {RISK_PER_TRADE*100}%")
    print(f"{'='*90}\n")
    
    balance = INITIAL_BALANCE
    trades = []
    position = None
    peak_balance = INITIAL_BALANCE
    
    for i in range(len(df)):
        row = df.iloc[i]
        signal = row['signal']
        
        if position is not None:
            current_price = row['close']
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π trailing stop
            if position['type'] == 'LONG':
                profit_pct = (current_price - position['entry']) / position['entry']
                
                # –ü—Ä–∏ 5% –ø—Ä–∏–±—ã–ª–∏ - –±–µ–∑—É–±—ã—Ç–æ–∫
                if profit_pct > 0.05:
                    position['stop_loss'] = max(position['stop_loss'], position['entry'] * 1.015)
                
                # –ü—Ä–∏ 10% –ø—Ä–∏–±—ã–ª–∏ - —Ñ–∏–∫—Å–∏—Ä—É–µ–º 70% –ø—Ä–∏–±—ã–ª–∏
                if profit_pct > 0.10:
                    position['stop_loss'] = max(position['stop_loss'], 
                                               position['entry'] + (current_price - position['entry']) * 0.7)
                
                if current_price <= position['stop_loss'] or current_price >= position['take_profit']:
                    pnl = (current_price - position['entry']) * position['size']
                    pnl -= position['size'] * position['entry'] * COMMISSION
                    pnl -= position['size'] * current_price * COMMISSION
                    balance += pnl
                    
                    trades.append({
                        'entry_time': position['entry_time'],
                        'exit_time': row['timestamp'],
                        'type': position['type'],
                        'entry': position['entry'],
                        'exit': current_price,
                        'size': position['size'],
                        'leverage': position['leverage'],
                        'pnl': pnl,
                        'balance': balance,
                        'hold_days': (row['timestamp'] - position['entry_time']).total_seconds() / 86400,
                        'return_pct': profit_pct * 100
                    })
                    
                    result = "‚úÖ TP" if current_price >= position['take_profit'] else "‚ö†Ô∏è SL"
                    print(f"{result} LONG | {position['entry']:.4f} ‚Üí {current_price:.4f} | "
                          f"PnL: {pnl:+.2f} USD ({profit_pct*100:+.1f}%) | "
                          f"–ü–ª–µ—á–æ: {position['leverage']:.1f}x | –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD")
                    
                    position = None
            
            elif position['type'] == 'SHORT':
                profit_pct = (position['entry'] - current_price) / position['entry']
                
                if profit_pct > 0.05:
                    position['stop_loss'] = min(position['stop_loss'], position['entry'] * 0.985)
                
                if profit_pct > 0.10:
                    position['stop_loss'] = min(position['stop_loss'],
                                               position['entry'] - (position['entry'] - current_price) * 0.7)
                
                if current_price >= position['stop_loss'] or current_price <= position['take_profit']:
                    pnl = (position['entry'] - current_price) * position['size']
                    pnl -= position['size'] * position['entry'] * COMMISSION
                    pnl -= position['size'] * current_price * COMMISSION
                    balance += pnl
                    
                    trades.append({
                        'entry_time': position['entry_time'],
                        'exit_time': row['timestamp'],
                        'type': position['type'],
                        'entry': position['entry'],
                        'exit': current_price,
                        'size': position['size'],
                        'leverage': position['leverage'],
                        'pnl': pnl,
                        'balance': balance,
                        'hold_days': (row['timestamp'] - position['entry_time']).total_seconds() / 86400,
                        'return_pct': profit_pct * 100
                    })
                    
                    result = "‚úÖ TP" if current_price <= position['take_profit'] else "‚ö†Ô∏è SL"
                    print(f"{result} SHORT | {position['entry']:.4f} ‚Üí {current_price:.4f} | "
                          f"PnL: {pnl:+.2f} USD ({profit_pct*100:+.1f}%) | "
                          f"–ü–ª–µ—á–æ: {position['leverage']:.1f}x | –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD")
                    
                    position = None
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø–ª–µ—á–æ–º
        if position is None and signal != 0:
            entry_price = row['close']
            sl_distance = row['sl_distance']
            tp_distance = row['tp_distance']
            
            if tp_distance / sl_distance < MIN_RISK_REWARD:
                continue
            
            if signal == 1:  # LONG
                stop_loss = entry_price - sl_distance
                take_profit = entry_price + tp_distance
                
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
                risk_amount = balance * RISK_PER_TRADE
                position_size_base = risk_amount / sl_distance
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
                leverage_used = MAX_LEVERAGE
                position_size = min(position_size_base * leverage_used, 
                                   balance * MAX_LEVERAGE / entry_price)
                
                # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø–ª–µ—á–æ
                effective_leverage = (position_size * entry_price) / balance
                
                position = {
                    'type': 'LONG',
                    'entry': entry_price,
                    'stop_loss': stop_loss,
                    'take_profit': take_profit,
                    'size': position_size,
                    'leverage': effective_leverage,
                    'entry_time': row['timestamp']
                }
                
                rr = tp_distance / sl_distance
                potential_profit = tp_distance * position_size
                print(f"üü¢ LONG | {entry_price:.4f} | SL: {stop_loss:.4f} | TP: {take_profit:.4f} | "
                      f"R:R {rr:.1f}:1 | –ü–ª–µ—á–æ: {effective_leverage:.1f}x | "
                      f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{potential_profit:.2f} USD")
            
            elif signal == -1:  # SHORT
                stop_loss = entry_price + sl_distance
                take_profit = entry_price - tp_distance
                
                risk_amount = balance * RISK_PER_TRADE
                position_size_base = risk_amount / sl_distance
                
                leverage_used = MAX_LEVERAGE
                position_size = min(position_size_base * leverage_used,
                                   balance * MAX_LEVERAGE / entry_price)
                
                effective_leverage = (position_size * entry_price) / balance
                
                position = {
                    'type': 'SHORT',
                    'entry': entry_price,
                    'stop_loss': stop_loss,
                    'take_profit': take_profit,
                    'size': position_size,
                    'leverage': effective_leverage,
                    'entry_time': row['timestamp']
                }
                
                rr = tp_distance / sl_distance
                potential_profit = tp_distance * position_size
                print(f"üî¥ SHORT | {entry_price:.4f} | SL: {stop_loss:.4f} | TP: {take_profit:.4f} | "
                      f"R:R {rr:.1f}:1 | –ü–ª–µ—á–æ: {effective_leverage:.1f}x | "
                      f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: +{potential_profit:.2f} USD")
        
        if balance > peak_balance:
            peak_balance = balance
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*90}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"{'='*90}\n")
    
    if trades:
        trades_df = pd.DataFrame(trades)
        
        total = len(trades)
        wins = len(trades_df[trades_df['pnl'] > 0])
        losses = total - wins
        wr = (wins / total * 100) if total > 0 else 0
        
        total_pnl = trades_df['pnl'].sum()
        avg_win = trades_df[trades_df['pnl'] > 0]['pnl'].mean() if wins > 0 else 0
        avg_loss = trades_df[trades_df['pnl'] < 0]['pnl'].mean() if losses > 0 else 0
        
        best = trades_df['pnl'].max()
        worst = trades_df['pnl'].min()
        
        win_sum = trades_df[trades_df['pnl'] > 0]['pnl'].sum()
        loss_sum = abs(trades_df[trades_df['pnl'] < 0]['pnl'].sum())
        pf = win_sum / loss_sum if loss_sum > 0 else float('inf')
        
        final = balance
        roi = ((final - INITIAL_BALANCE) / INITIAL_BALANCE) * 100
        
        avg_hold = trades_df['hold_days'].mean()
        avg_leverage = trades_df['leverage'].mean()
        avg_return = trades_df[trades_df['return_pct'] > 0]['return_pct'].mean() if wins > 0 else 0
        
        # –ü—Ä–æ—Å–∞–¥–∫–∞
        trades_df['cum'] = trades_df['balance']
        trades_df['peak'] = trades_df['cum'].cummax()
        trades_df['dd'] = (trades_df['cum'] - trades_df['peak']) / trades_df['peak'] * 100
        max_dd = trades_df['dd'].min()
        
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {INITIAL_BALANCE:.2f} ‚Üí {final:.2f} USD")
        print(f"üìà PnL: {total_pnl:+.2f} USD ({roi:+.1f}%)")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –ø–ª–µ—á–æ: {avg_leverage:.1f}x")
        print(f"\nüìä –°–¥–µ–ª–æ–∫: {total} | ‚úÖ {wins} ({wr:.1f}%) | ‚ùå {losses}")
        print(f"üíµ –°—Ä. –ø—Ä–∏–±—ã–ª—å: +{avg_win:.2f} USD | –°—Ä. —É–±—ã—Ç–æ–∫: {avg_loss:.2f} USD")
        print(f"üéØ –õ—É—á—à–∞—è: +{best:.2f} USD | –•—É–¥—à–∞—è: {worst:.2f} USD")
        print(f"üìä Profit Factor: {pf:.2f}")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ: {avg_hold:.1f} –¥–Ω–µ–π")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç: {avg_return:.1f}%")
        print(f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_dd:.2f}%")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
        max_leverage_used = trades_df['leverage'].max()
        print(f"‚ö†Ô∏è –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–ª–µ—á–æ: {max_leverage_used:.1f}x")
        
    else:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫")
        total_pnl = 0
        wr = 0
        roi = 0
        pf = 0
        avg_hold = 0
        avg_leverage = 0
    
    print(f"\n{'='*90}\n")
    
    return trades, {'pnl': total_pnl, 'wr': wr, 'roi': roi, 'pf': pf, 'avg_hold': avg_hold, 'avg_leverage': avg_leverage}

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    # –î–æ–±–∞–≤–∏–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã –¥–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–∏–±—ã–ª–∏
    symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'BNB/USDT', 'AVAX/USDT']
    
    strategies = {
        '4h': ('4h Aggressive Turtle (15-period)', strategy_4h_aggressive_turtle, 90),
        '12h': ('12h Momentum Breakout (BB + Volume)', strategy_12h_momentum, 120),
        '1d': ('1d Strong Trend Following', strategy_1d_strong_trend, 180)
    }
    
    print("=" * 90)
    print("üöÄ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –°–í–ò–ù–ì-–¢–†–ï–ô–î–ò–ù–ì –°–ò–°–¢–ï–ú–ê")
    print("üí∞ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –º–∞–ª–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å –ø–ª–µ—á–æ–º –¥–æ 7x")
    print("‚ö° –†–∏—Å–∫: 3% –Ω–∞ —Å–¥–µ–ª–∫—É | –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π R:R: 2:1")
    print("=" * 90)
    print(f"‚è∞ –°—Ç–∞—Ä—Ç: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    all_results = []
    
    for symbol in symbols:
        for timeframe, (strategy_name, strategy_func, days) in strategies.items():
            try:
                df = fetch_historical_data(symbol, timeframe, days)
                df = strategy_func(df)
                trades, stats = backtest_aggressive(df, strategy_name, symbol, timeframe)
                
                all_results.append({
                    'symbol': symbol,
                    'timeframe': timeframe,
                    'strategy': strategy_name,
                    'trades': trades,
                    'stats': stats
                })
                
                time.sleep(2)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ {symbol} {timeframe}: {e}\n")
                continue
    
    # –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    print("\n" + "=" * 120)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ - –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print("=" * 120)
    print(f"{'–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç':<12} | {'TF':<4} | {'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<45} | {'–°–¥–µ–ª–æ–∫':<7} | {'WR%':<6} | {'PnL':<10} | {'ROI%':<8} | {'PF':<6} | {'–ü–ª–µ—á–æ':<6}")
    print("-" * 120)
    
    best_strategy = None
    best_roi = -float('inf')
    
    for result in all_results:
        if result['trades']:
            stats = result['stats']
            print(f"{result['symbol']:<12} | {result['timeframe']:<4} | {result['strategy']:<45} | "
                  f"{len(result['trades']):<7} | {stats['wr']:>5.1f}% | {stats['pnl']:>+9.2f} | "
                  f"{stats['roi']:>+7.1f}% | {stats['pf']:>5.2f} | {stats['avg_leverage']:>5.1f}x")
            
            if stats['roi'] > best_roi:
                best_roi = stats['roi']
                best_strategy = result
        else:
            print(f"{result['symbol']:<12} | {result['timeframe']:<4} | {result['strategy']:<45} | {'0':<7} | {'-':<6} | {'-':<10} | {'-':<8} | {'-':<6} | {'-':<6}")
    
    print("-" * 120)
    
    # –õ–£–ß–®–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø
    if best_strategy:
        print("\n" + "=" * 120)
        print("üèÜ –õ–£–ß–®–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø")
        print("=" * 120)
        print(f"üìä {best_strategy['symbol']} | {best_strategy['timeframe']} | {best_strategy['strategy']}")
        print(f"üí∞ ROI: {best_strategy['stats']['roi']:+.1f}%")
        print(f"üìà PnL: {best_strategy['stats']['pnl']:+.2f} USD")
        print(f"‚úÖ Win Rate: {best_strategy['stats']['wr']:.1f}%")
        print(f"üìä Profit Factor: {best_strategy['stats']['pf']:.2f}")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –ø–ª–µ—á–æ: {best_strategy['stats']['avg_leverage']:.1f}x")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ: {best_strategy['stats']['avg_hold']:.1f} –¥–Ω–µ–π")
        print("=" * 120)
        
        # –¢–û–ü-5 –°–î–ï–õ–û–ö
        if best_strategy['trades']:
            trades_df = pd.DataFrame(best_strategy['trades'])
            top_trades = trades_df.nlargest(5, 'pnl')
            
            print("\nüåü –¢–û–ü-5 –ü–†–ò–ë–´–õ–¨–ù–´–• –°–î–ï–õ–û–ö:")
            print("-" * 120)
            for idx, trade in top_trades.iterrows():
                print(f"  {trade['type']:<6} | {trade['entry_time'].strftime('%Y-%m-%d %H:%M')} | "
                      f"{trade['entry']:.4f} ‚Üí {trade['exit']:.4f} | "
                      f"PnL: {trade['pnl']:+.2f} USD ({trade['return_pct']:+.1f}%) | "
                      f"–ü–ª–µ—á–æ: {trade['leverage']:.1f}x | "
                      f"–£–¥–µ—Ä–∂–∞–Ω–∏–µ: {trade['hold_days']:.1f} –¥–Ω–µ–π")
            print("-" * 120)
    
    # –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print("\n" + "=" * 120)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –°–¢–†–ê–¢–ï–ì–ò–Ø–ú")
    print("=" * 120)
    
    total_trades = sum(len(r['trades']) for r in all_results if r['trades'])
    total_pnl = sum(r['stats']['pnl'] for r in all_results if r['trades'])
    
    profitable_strategies = [r for r in all_results if r['trades'] and r['stats']['pnl'] > 0]
    losing_strategies = [r for r in all_results if r['trades'] and r['stats']['pnl'] <= 0]
    
    print(f"üéØ –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(all_results)}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
    print(f"üí∞ –û–±—â–∏–π PnL: {total_pnl:+.2f} USD")
    print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(profitable_strategies)}")
    print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(losing_strategies)}")
    
    if profitable_strategies:
        avg_roi_profitable = np.mean([r['stats']['roi'] for r in profitable_strategies])
        avg_wr_profitable = np.mean([r['stats']['wr'] for r in profitable_strategies])
        avg_pf_profitable = np.mean([r['stats']['pf'] for r in profitable_strategies if r['stats']['pf'] != float('inf')])
        
        print(f"\nüíé –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")
        print(f"   ROI: {avg_roi_profitable:+.1f}%")
        print(f"   Win Rate: {avg_wr_profitable:.1f}%")
        print(f"   Profit Factor: {avg_pf_profitable:.2f}")
    
    print("=" * 120)
    
    # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    print("\n" + "=" * 120)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò")
    print("=" * 120)
    print("‚ö†Ô∏è –í–ê–ñ–ù–û:")
    print("  1. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ä—ã–Ω–∫–µ")
    print("  2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–µ—á–æ 3-5x –¥–ª—è –Ω–∞—á–∞–ª–∞, –Ω–µ —Å—Ä–∞–∑—É 7x")
    print("  3. –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: –Ω–µ –±–æ–ª–µ–µ 3% –Ω–∞ —Å–¥–µ–ª–∫—É")
    print("  4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞—â–∏—Ç—É –æ—Ç –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: —Å—Ç–æ–ø-–ª–æ—Å—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    print("  5. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é —Ä—ã–Ω–∫–∞ - –≤ —à—Ç–∏–ª—å —Å–Ω–∏–∑—å—Ç–µ –ø–ª–µ—á–æ")
    print("  6. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ: –Ω–µ —Ç–æ—Ä–≥—É–π—Ç–µ –≤—Å–µ –¥–µ–ø–æ –≤ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ")
    print("  7. –í–µ–¥–∏—Ç–µ –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏")
    print("  8. –ü—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ 20%+ - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    print("\nüéØ –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑ —Ç–µ—Å—Ç–∞:")
    if best_strategy:
        print(f"   {best_strategy['symbol']} –Ω–∞ {best_strategy['timeframe']} —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy['strategy']}")
        print(f"   –ü–æ–∫–∞–∑–∞–ª–∞ ROI: {best_strategy['stats']['roi']:+.1f}%")
    print("\n‚ö° –ü–æ–º–Ω–∏—Ç–µ: –ø—Ä–æ—à–ª—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –±—É–¥—É—â—É—é –ø—Ä–∏–±—ã–ª—å!")
    print("=" * 120)
    
    print(f"\n‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 120)

if __name__ == '__main__':
    main()
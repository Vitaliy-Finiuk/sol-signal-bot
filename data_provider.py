import ccxt
import pandas as pd
from datetime import datetime, timedelta
import time
import logging
from typing import List, Optional, Dict, Any

logger = logging.getLogger(__name__)

class DataProvider:
    def __init__(self, use_exchange: str = 'okx'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            use_exchange: 'okx', 'binance' –∏–ª–∏ 'bybit'
        """
        self.cache = {}
        self.cache_duration = {
            '4h': 900,    # 15 –º–∏–Ω—É—Ç
            '12h': 1800,  # 30 –º–∏–Ω—É—Ç  
            '1d': 3600    # 1 —á–∞—Å
        }
        self.last_request_time = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if use_exchange == 'okx':
            self.exchange = ccxt.okx({'enableRateLimit': True})
        elif use_exchange == 'binance':
            self.exchange = ccxt.binance({'enableRateLimit': True})
        elif use_exchange == 'bybit':
            self.exchange = ccxt.bybit({'enableRateLimit': True})
        else:
            self.exchange = ccxt.okx({'enableRateLimit': True})
        
        logger.info(f"DataProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∏—Ä–∂–µ–π: {use_exchange.upper()}")
    
    def fetch_ohlcv(self, symbol: str, timeframe: str, limit: int = 100) -> List[list]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç OHLCV –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'BTC/USDT')
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º ('4h', '12h', '1d')
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            
        Returns:
            List[list]: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π [timestamp, open, high, low, close, volume]
        """
        cache_key = f"{symbol}_{timeframe}"
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if cache_key in self.cache:
            cached_data, timestamp = self.cache[cache_key]
            if time.time() - timestamp < self.cache_duration.get(timeframe, 300):
                logger.info(f"üì¶ –ö—ç—à: {symbol} {timeframe}")
                return cached_data
    
        try:
            # Rate limiting
            time_since_last = time.time() - self.last_request_time
            if time_since_last < 1:
                time.sleep(1 - time_since_last)
        
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {symbol} {timeframe} (limit={limit}) —Å {self.exchange.id.upper()}...")
            
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            
            if not ohlcv:
                logger.error(f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {symbol} {timeframe}")
                return []
            
            # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            self.cache[cache_key] = (ohlcv, time.time())
            self.last_request_time = time.time()
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(ohlcv)} —Å–≤–µ—á–µ–π {symbol} {timeframe}")
            return ohlcv
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol} {timeframe}: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
data_provider = DataProvider(use_exchange='okx')


def safe_fetch_ohlcv(symbol: str, timeframe: str, limit: int = 100) -> Optional[pd.DataFrame]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Returns:
        DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: timestamp, open, high, low, close, volume
    """
    try:
        ohlcv = data_provider.fetch_ohlcv(symbol, timeframe, limit)
        
        if not ohlcv or len(ohlcv) == 0:
            return None
        
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        
        return df
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ safe_fetch_ohlcv –¥–ª—è {symbol} {timeframe}: {e}")
        return None

import ccxt
import pandas as pd
import time
import requests
import ta
import os
import threading
from flask import Flask
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta

# === Telegram ===
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")
BOT_URL = os.environ.get("https://sol-signal-bot-wpme.onrender.com/") 

def keep_alive():
    while True:
        try:
            if BOT_URL:
                requests.get(BOT_URL)
        except:
            pass
        time.sleep(300)  # –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

threading.Thread(target=keep_alive, daemon=True).start()

def send_telegram(msg, img=None):
    if img is None:
        data = {'chat_id': CHAT_ID, 'text': msg, 'parse_mode': 'Markdown'}
        requests.post(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage', data=data)
    else:
        files = {'photo': img.getvalue()}
        data = {'chat_id': CHAT_ID, 'caption': msg, 'parse_mode': 'Markdown'}
        requests.post(f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto', data=data, files=files)

# === Flask keep-alive ===
app = Flask(__name__)
@app.route("/")
def home():
    return "Bot is running!"
threading.Thread(target=lambda: app.run(host="0.0.0.0", port=10000)).start()

# === –ë–∏—Ä–∂–∞ ===
exchange = ccxt.okx({'enableRateLimit': True})

symbols = ['BTC/USDT','BNB/USDT','SOL/USDT']
timeframes = ['5m','15m']

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ ===
BALANCE = 100.0  # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
RISK_PER_TRADE = 0.01  # 1% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
MAX_LEVERAGE = 5  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏/grid

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ===
stats = {s:{tf:{'LONG':0,'SHORT':0,'Total':0,'Success':0} for tf in timeframes} for s in symbols}
last_summary_time = datetime.now()
last_daily_report = datetime.now()

# === –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fetch OHLCV ===
def safe_fetch_ohlcv(symbol, timeframe, retries=5):
    delay = 5
    for i in range(retries):
        try:
            return exchange.fetch_ohlcv(symbol, timeframe, limit=100)
        except ccxt.NetworkError:
            time.sleep(delay)
            delay *= 2
        except ccxt.ExchangeError:
            time.sleep(delay)
    raise Exception(f"Failed to fetch OHLCV for {symbol}")

# === –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ===
def calc_indicators(df):
    df['ADX'] = ta.trend.adx(df['high'], df['low'], df['close'], window=14)
    df['+DI'] = ta.trend.adx_pos(df['high'], df['low'], df['close'], window=14)
    df['-DI'] = ta.trend.adx_neg(df['high'], df['low'], df['close'], window=14)
    macd = ta.trend.MACD(df['close'])
    df['MACD'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    df['RSI'] = ta.momentum.rsi(df['close'], window=14)
    df['WR'] = ta.momentum.williams_r(df['high'], df['low'], df['close'], lbp=14)
    return df

# === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ ===
def plot_signal(df, signal_type, symbol, timeframe):
    fig, ax = plt.subplots(figsize=(10,4))
    ax.plot(df['timestamp'], df['close'], label='Close')
    last = df.iloc[-1]
    if signal_type:
        ax.scatter(last['timestamp'], last['close'], color='green' if signal_type=='LONG' else 'red', s=100, label=signal_type)
    ax.set_title(f"{symbol} {timeframe}")
    ax.legend()
    img = BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    plt.close(fig)
    return img

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–ª–µ—á–æ–º ===
# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–ª–µ—á–æ–º + –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ ===
def check_signal(df, symbol, timeframe):
    last = df.iloc[-1]
    prev = df.iloc[-2]
    adx, plus_di, minus_di = last['ADX'], last['+DI'], last['-DI']
    macd, macd_sig = last['MACD'], last['MACD_Signal']
    prev_macd, prev_macd_sig = prev['MACD'], prev['MACD_Signal']
    rsi, wr = last['RSI'], last['WR']

    # –¢—Ä–µ–Ω–¥
    trend = 'up' if plus_di > minus_di else 'down'

    # MACD –∫—Ä–æ—Å—Å
    macd_cross = None
    if prev_macd < prev_macd_sig and macd > macd_sig:
        macd_cross = 'bullish'
    elif prev_macd > prev_macd_sig and macd < macd_sig:
        macd_cross = 'bearish'

    # –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã
    osc = None
    if rsi < 30 and wr < -80:
        osc = 'oversold'
    elif rsi > 70 and wr > -20:
        osc = 'overbought'

    signal_type = None
    if adx >= 25:
        if trend=='up' and macd_cross=='bullish' and osc=='oversold':
            signal_type='LONG'
        elif trend=='down' and macd_cross=='bearish' and osc=='overbought':
            signal_type='SHORT'

    # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    entry_price = last['close']
    stop_loss = entry_price * 0.99 if signal_type=='LONG' else entry_price * 1.01
    take_profit = entry_price * 1.02 if signal_type=='LONG' else entry_price * 0.98
    position_size = BALANCE * RISK_PER_TRADE / abs(entry_price - stop_loss)
    leverage_used = min(MAX_LEVERAGE, position_size / BALANCE)
    position_size *= leverage_used

    # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å / —É–±—ã—Ç–æ–∫ –≤ USD
    if signal_type == 'LONG':
        potential_profit = (take_profit - entry_price) * position_size
        potential_loss = (entry_price - stop_loss) * position_size
    elif signal_type == 'SHORT':
        potential_profit = (entry_price - take_profit) * position_size
        potential_loss = (stop_loss - entry_price) * position_size
    else:
        potential_profit = potential_loss = 0

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats[symbol][timeframe]['Total'] += 1
    if signal_type:
        stats[symbol][timeframe][signal_type] += 1
        stats[symbol][timeframe]['Success'] += 1

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ —Ç–∞–±–ª–∏—Ü–µ–π
    if signal_type:
        msg = (f"‚ö° *{signal_type} —Å–∏–≥–Ω–∞–ª* –ø–æ {symbol} ({timeframe})\n"
               f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}\nStop-Loss: {stop_loss:.2f} | Take-Profit: {take_profit:.2f}\n"
               f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.2f} USD\n–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ: {leverage_used:.1f}x\n"
               f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit:.2f} USD | –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {potential_loss:.2f} USD\n"
               f"–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {RISK_PER_TRADE*100:.1f}%\n"
               f"‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å grid-–±–æ—Ç –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ")
        img = plot_signal(df, signal_type, symbol, timeframe)
        send_telegram(msg, img)

    return signal_type

# === –°–≤–æ–¥–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç ===
def send_summary():
    msg = f"üìä *–°–≤–æ–¥–∫–∞ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º* {datetime.now()}\n"
    for s in symbols:
        for tf in timeframes:
            st = stats[s][tf]
            msg += f"{s} {tf}: Total={st['Total']} LONG={st['LONG']} SHORT={st['SHORT']}\n"
    send_telegram(msg)

# === –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ===
def send_daily_report():
    msg = f"üìà *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏* {datetime.now().strftime('%Y-%m-%d')}\n"
    for s in symbols:
        for tf in timeframes:
            st = stats[s][tf]
            total = st['Total'] if st['Total']>0 else 1
            success_rate = st['Success'] / total * 100
            msg += (f"{s} {tf}: Total={st['Total']} LONG={st['LONG']} SHORT={st['SHORT']} "
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {success_rate:.1f}%\n")
    send_telegram(msg)

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def main_loop():
    global last_summary_time, last_daily_report
    while True:
        try:
            now = datetime.now()
            for symbol in symbols:
                for tf in timeframes:
                    ohlcv = safe_fetch_ohlcv(symbol, tf)
                    df = pd.DataFrame(ohlcv, columns=['timestamp','open','high','low','close','volume'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df = calc_indicators(df)
                    check_signal(df, symbol, tf)

            # –°–≤–æ–¥–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            if (now - last_summary_time) > timedelta(minutes=15):
                send_summary()
                last_summary_time = now

            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 23:00
            if now.hour == 23 and (now - last_daily_report).days >= 1:
                send_daily_report()
                last_daily_report = now

            time.sleep(60)

        except Exception as e:
            send_telegram(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(10)

# === –ó–∞–ø—É—Å–∫ ===
main_loop()

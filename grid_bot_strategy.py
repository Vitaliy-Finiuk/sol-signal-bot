"""
Grid Bot Strategy - –ó–∞–ø—É—Å–∫ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º Range Trading

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Ç–∫—É –æ—Ä–¥–µ—Ä–æ–≤ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
–∫–æ–≥–¥–∞ Range Trading —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–æ–∫–æ–≤–∏–∫.
"""

import pandas as pd
import numpy as np
import ta
from typing import Dict, List, Tuple, Optional
import logging

logger = logging.getLogger(__name__)


class GridBotStrategy:
    """
    Grid Bot –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
    –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ç–∫—É –æ—Ä–¥–µ—Ä–æ–≤ –º–µ–∂–¥—É –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º.
    """
    
    def __init__(
        self,
        grid_levels: int = 10,
        profit_per_grid: float = 0.005,  # 0.5% –ø—Ä–∏–±—ã–ª—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
        capital_per_grid: float = 0.1,   # 10% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
        min_range_pct: float = 2.0,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 2%
        max_range_pct: float = 10.0      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 10%
    ):
        self.grid_levels = grid_levels
        self.profit_per_grid = profit_per_grid
        self.capital_per_grid = capital_per_grid
        self.min_range_pct = min_range_pct
        self.max_range_pct = max_range_pct
        
    def detect_range(self, df: pd.DataFrame, lookback: int = 50) -> Optional[Dict]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è Grid Bot
        
        Returns:
            Dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–ª–∏ None
        """
        try:
            if len(df) < lookback:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df['ADX'] = ta.trend.adx(df['high'], df['low'], df['close'], window=14)
            df['Support'] = df['low'].rolling(window=lookback).min()
            df['Resistance'] = df['high'].rolling(window=lookback).max()
            
            last = df.iloc[-1]
            
            if pd.isna(last['ADX']):
                return None
            
            support = float(last['Support'])
            resistance = float(last['Resistance'])
            current_price = float(last['close'])
            adx = float(last['ADX'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            range_height = resistance - support
            range_pct = (range_height / support) * 100
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è Grid Bot
            is_ranging = (
                adx < 30 and  # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥
                self.min_range_pct < range_pct < self.max_range_pct and  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                support < current_price < resistance  # –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            )
            
            if not is_ranging:
                return None
            
            return {
                'support': support,
                'resistance': resistance,
                'current_price': current_price,
                'range_pct': range_pct,
                'range_height': range_height,
                'adx': adx
            }
            
        except Exception as e:
            logger.error(f"Error detecting range: {e}")
            return None
    
    def create_grid(self, range_info: Dict, balance: float) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–µ—Ç–∫—É –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            range_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            balance: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            
        Returns:
            Dict —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–µ—Ç–∫–∏
        """
        support = range_info['support']
        resistance = range_info['resistance']
        current_price = range_info['current_price']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Å–µ—Ç–∫–∏
        grid_step = (resistance - support) / (self.grid_levels - 1)
        
        buy_levels = []
        sell_levels = []
        
        for i in range(self.grid_levels):
            level_price = support + (grid_step * i)
            
            # –û—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            if level_price < current_price:
                buy_levels.append({
                    'price': level_price,
                    'amount': (balance * self.capital_per_grid) / level_price,
                    'sell_price': level_price * (1 + self.profit_per_grid)
                })
            
            # –û—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            elif level_price > current_price:
                sell_levels.append({
                    'price': level_price,
                    'amount': (balance * self.capital_per_grid) / level_price,
                    'buy_price': level_price * (1 - self.profit_per_grid)
                })
        
        return {
            'support': support,
            'resistance': resistance,
            'current_price': current_price,
            'grid_step': grid_step,
            'buy_levels': buy_levels,
            'sell_levels': sell_levels,
            'total_buy_orders': len(buy_levels),
            'total_sell_orders': len(sell_levels),
            'capital_allocated': balance * self.capital_per_grid * len(buy_levels)
        }
    
    def calculate_profit_potential(self, grid_config: Dict, range_info: Dict) -> Dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç Grid Bot
        
        Returns:
            Dict —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø—Ä–∏–±—ã–ª–∏
        """
        # –ü—Ä–∏–±—ã–ª—å –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–ø–æ–∫—É–ø–∫–∞ -> –ø—Ä–æ–¥–∞–∂–∞)
        profit_per_cycle = grid_config['capital_allocated'] * self.profit_per_grid
        
        # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤ –≤ –¥–µ–Ω—å (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
        range_pct = range_info['range_pct']
        estimated_cycles_per_day = range_pct / 2  # –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏
        daily_profit = profit_per_cycle * estimated_cycles_per_day
        monthly_profit = daily_profit * 30
        
        return {
            'profit_per_cycle': profit_per_cycle,
            'estimated_cycles_per_day': estimated_cycles_per_day,
            'daily_profit_estimate': daily_profit,
            'monthly_profit_estimate': monthly_profit,
            'monthly_roi_estimate': (monthly_profit / grid_config['capital_allocated']) * 100
        }


def strategy_grid_bot(df: pd.DataFrame, balance: float = 1000) -> Tuple[Optional[str], Dict]:
    """
    Grid Bot —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
    
    Args:
        df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
        balance: –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        
    Returns:
        Tuple (signal, params)
        signal: 'GRID_START' –∏–ª–∏ None
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Grid Bot
    """
    try:
        grid_bot = GridBotStrategy(
            grid_levels=10,
            profit_per_grid=0.005,  # 0.5% –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
            capital_per_grid=0.1     # 10% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        range_info = grid_bot.detect_range(df)
        
        if not range_info:
            return None, {}
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
        grid_config = grid_bot.create_grid(range_info, balance)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        profit_potential = grid_bot.calculate_profit_potential(grid_config, range_info)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            'signal_type': 'GRID_START',
            'range_info': range_info,
            'grid_config': grid_config,
            'profit_potential': profit_potential,
            'strategy': 'Grid Bot',
            'timeframe': '4h'
        }
        
        logger.info(
            f"Grid Bot signal: Range {range_info['support']:.2f}-{range_info['resistance']:.2f} "
            f"({range_info['range_pct']:.1f}%), {grid_config['total_buy_orders']} buy orders, "
            f"Est. monthly ROI: {profit_potential['monthly_roi_estimate']:.1f}%"
        )
        
        return 'GRID_START', params
        
    except Exception as e:
        logger.error(f"Grid Bot strategy error: {e}")
        return None, {}


def format_grid_signal(params: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª Grid Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Grid Bot
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    range_info = params['range_info']
    grid_config = params['grid_config']
    profit = params['profit_potential']
    
    msg = f"""
ü§ñ **GRID BOT SIGNAL**

üìä **–î–∏–∞–ø–∞–∑–æ–Ω:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {range_info['support']:.2f}
‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {range_info['resistance']:.2f}
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {range_info['range_pct']:.1f}%
‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {range_info['current_price']:.2f}
‚Ä¢ ADX: {range_info['adx']:.1f} (–±–æ–∫–æ–≤–∏–∫)

üéØ **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏:**
‚Ä¢ –£—Ä–æ–≤–Ω–µ–π: {grid_config['total_buy_orders'] + grid_config['total_sell_orders']}
‚Ä¢ –®–∞–≥ —Å–µ—Ç–∫–∏: {grid_config['grid_step']:.2f}
‚Ä¢ –û—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {grid_config['total_buy_orders']}
‚Ä¢ –û—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {grid_config['total_sell_orders']}
‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª: {grid_config['capital_allocated']:.2f} USDT

üí∞ **–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏:**
‚Ä¢ –ó–∞ —Ü–∏–∫–ª: {profit['profit_per_cycle']:.2f} USDT
‚Ä¢ –¶–∏–∫–ª–æ–≤/–¥–µ–Ω—å: ~{profit['estimated_cycles_per_day']:.1f}
‚Ä¢ –í –¥–µ–Ω—å: ~{profit['daily_profit_estimate']:.2f} USDT
‚Ä¢ –í –º–µ—Å—è—Ü: ~{profit['monthly_profit_estimate']:.2f} USDT
‚Ä¢ ROI –º–µ—Å—è—Ü: ~{profit['monthly_roi_estimate']:.1f}%

üìù **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Grid Bot –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {range_info['support']:.0f}-{range_info['resistance']:.0f}
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {grid_config['total_buy_orders'] + grid_config['total_sell_orders']} —É—Ä–æ–≤–Ω–µ–π
3. –ü—Ä–∏–±—ã–ª—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: 0.5%
4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–±–æ–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (—Å—Ç–æ–ø –ø—Ä–∏ ADX > 30)

‚ö†Ô∏è **–†–∏—Å–∫–∏:**
‚Ä¢ –ü—Ä–æ–±–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑
‚Ä¢ –ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ –æ—Ä–¥–µ—Ä–∞—Ö
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ –±–∏—Ä–∂–∏

üöÄ **–ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É!**
"""
    
    return msg


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import ccxt
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    exchange = ccxt.okx({'enableRateLimit': True})
    ohlcv = exchange.fetch_ohlcv('SOL/USDT', '4h', limit=100)
    
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    
    # –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    signal, params = strategy_grid_bot(df, balance=1000)
    
    if signal:
        print(format_grid_signal(params))
    else:
        print("–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Grid Bot")
